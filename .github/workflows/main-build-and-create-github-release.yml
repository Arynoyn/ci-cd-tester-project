name: CI - Build All Platforms
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      mode:
        description: 'check OR release (platform)'
        required: true
        default: 'check'

jobs:
  unitTests:
    name: Run Unit Tests for Unity version ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    strategy: 
      fail-fast: false
      matrix:
        unityVersion: 
          - 2020.3.5f1
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          lfs: true
      - name : Cache Library
        uses: actions/cache@v2
        with:
          path: Library
          key: Library          
      - name: Run Unit Tests
        uses: game-ci/unity-test-runner@main
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          unityVersion: ${{ matrix.unityVersion }}
          artifactsPath: ${{ matrix.unityVersion }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.unityVersion }} Test Results
      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test results for ${{ matrix.unityVersion }}
          path: ${{ steps.tests.outputs.artifactsPath }}
      # - name: Write to Changelog
      #   if: github.event.action == 'published'
      #   env:
      #     RELEASE_NOTES: ${{ github.event.release.body }}
      #   run: echo "$RELEASE_NOTES" > fastlane/metadata/android/en-US/changelogs/default.txt
      # - name: Auto-Commit Changelog
      #   if: github.event.action == 'published'
      #   uses: stefanzweifel/git-auto-commit-action@v4
      #   with:
      #     branch: master
      #     file_pattern: fastlane/metadata/android/en-US/changelogs/*
      #     commit_message: Update Changelog

  buildWithLinux:
    name: Build for ${{ matrix.targetPlatform }} on version ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    needs: unitTests
    strategy: 
      fail-fast: false
      matrix:
        unityVersion: 
          - 2020.3.5f1
        targetPlatform:
          # TODO: Learn how to include JUST the platform from the dispatch
          # - Android # Build an Android apk standalone app
          # - iOS # Build an iOS Player
          - StandaloneWindows # build a Windows Standalone
          # - StandaloneWindows64 # build a Windows 64-bit Standalone
          - StandaloneOSX # build a MacOS Standalone (Intel 64-bit)
          # - StandaloneLinux64 # build a Linux 64-bit Standalone 
          - WebGL # WebGL        
    steps:
      - name: Free Disk Space for Android
        if: matrix.targetPlatform == 'Android'
        run: |
          df -h
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
      - name: Cache Library
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
      - name: Build Unity Project
        uses: game-ci/unity-builder@v2.0-alpha-10
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: ${{ matrix.targetPlatform }}
          versioning: Semantic
      - name: Upload Build
        uses: actions/upload-artifact@v2
        if: github.event.action == 'published' || contains(github.event.inputs.mode, 'release')
        with:
          name: build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
      - name: Zip build/${{ matrix.targetPlatform }}
        uses: montudor/action-zip@v1
        if: (github.event.action == 'published' || contains(github.event.inputs.mode, 'release')) # && matrix.targetPlatform != 'Android' && matrix.targetPlatform != 'iOS' && matrix.targetPlatform != 'StandaloneOSX'
        with:
          args: zip -qq -r build/build-${{ matrix.targetPlatform }}.zip build/${{ matrix.targetPlatform }}
      - name: Upload build-${{ matrix.targetPlatform }}.zip to GitHub Release
        uses: svenstaro/upload-release-action@v2
        if: (github.event.action == 'published' || contains(github.event.inputs.mode, 'release')) # && matrix.targetPlatform != 'Android' && matrix.targetPlatform != 'iOS' && matrix.targetPlatform != 'StandaloneOSX'
        with:
          repo_token: ${{ secrets.GH_CREDENTIALS }}
          asset_name: build-${{ matrix.targetPlatform }}.zip
          file: build/build-${{ matrix.targetPlatform }}.zip
          tag: ${{ github.ref }}
          overwrite: true
          body:  ${{ github.event.release.body }}

  # buildWithWindows:
  #   name: Build for ${{ matrix.targetPlatform }}
  #   runs-on: windows-latest
  #   needs: unitTests
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       targetPlatform:
  #         - StandaloneWindows # build a Windows Standalone
  #         - StandaloneWindows64 # build a Windows 64-bit Standalone
  #         - WSAPlayer
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #         lfs: true
  #     - name: Get Version
  #       id: versioning
  #       uses: paulhatch/semantic-version@v4.0.2
  #       with:
  #         format: "${major}.${minor}.${patch}"
  #     - name: Setup Unity IL2CPP
  #       uses: kuler90/setup-unity@v1
  #       with:
  #         unity-modules: windows-il2cpp
  #     - name: Setup Unity UWP
  #       uses: kuler90/setup-unity@v1
  #       if: matrix.targetPlatform == 'WSAPlayer'
  #       with:
  #         unity-modules: universal-windows-platform
  #     - name: Activate Unity
  #       uses: kuler90/activate-unity@v1
  #       with:
  #         unity-username: ${{ secrets.UNITY_EMAIL }}
  #         unity-password: ${{ secrets.UNITY_PASSWORD }}          
  #     - name: Build Unity
  #       uses: kuler90/build-unity@v1
  #       with:
  #         build-path: build/${{ matrix.targetPlatform }}
  #         build-target: ${{ matrix.targetPlatform }}
  #         # build-method: Cgs.Editor.BuildCgs.BuildOptions
  #         build-version: ${{ steps.versioning.outputs.version }}
  #     - name: Upload Build
  #       uses: actions/upload-artifact@v2
  #       if: github.event.action == 'published' || contains(github.event.inputs.mode, 'release')
  #       with:
  #         name: build-${{ matrix.targetPlatform }}
  #         path: build/${{ matrix.targetPlatform }}
  #     - name: Zip build/${{ matrix.targetPlatform }}
  #       uses: papeloto/action-zip@v1
  #       if: github.event.action == 'published' && matrix.targetPlatform != 'WSAPlayer'
  #       with:
  #         files: build/${{ matrix.targetPlatform }}/
  #         dest: build/build-${{ matrix.targetPlatform }}.zip
  #     - name: Upload build-${{ matrix.targetPlatform }}.zip to GitHub Release
  #       uses: svenstaro/upload-release-action@v2
  #       if: github.event.action == 'published' && matrix.targetPlatform != 'WSAPlayer'
  #       with:
  #         repo_token: ${{ secrets.GH_CREDENTIALS }}
  #         asset_name: build-${{ matrix.targetPlatform }}.zip
  #         file: build/build-${{ matrix.targetPlatform }}.zip
  #         tag: ${{ github.ref }}
  #         overwrite: true
  #         body: ${{ github.event.release.body }}